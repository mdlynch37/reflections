What happens when you initialize a repository? Why do you need to do it?

Creates a hidden directory called .git that stores meta-data and version history as commits are added to git

How is the staging area different from the working directory and the repository? What value do you think it offers?

A commit updates the snapshot of the repository according to changes made to files first added to the staging area. It allows for multiple updated files to be grouped together for the next commit. The repository contains these linked commits, whereas the working directory is the state of the repository at the current HEAD (correct term??) plus any changes yet to be committed.

How can you use the staging area to make sure you have one commit per logical change?
By grouping together files that have updates related to a commit's one logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches are useful for experimental features, localizations, and other significant deviations from the master branch. They also preserve the state of the master/parent branch at the time the child branch is created so that updates to the parent branch do not "break" interactions with previously created branch children.

How do the diagrams help you visualize the branch structure?
By showing how commits are reachable through branches, and where branches may differ from each other through a non-linear history structure.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches links the lower-order branch head to the higher-order one (could be master) and while the log history of the master branch shows commits in chronological order, commits are connected to their original parent commit, maintaining the structure of both branches.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pros: saves times
Cons: can lack granularity, make things less clear.

HELPFUL COMMANDS TO REMEMBER
git log --graph --oneline master coins (compare branches visually, also see tools like gliffy and yUML)
git checkout -b new_branch_name (checks out current staging area into new branch so that it is "reachable"/saved, and not lost when checking out another branch)
git show [commit id] (checks against parents, useful when comparing changes across previously merged branches)
git diff (summary of changes flag?)??
