

When would you want to use a remote repository rather than keeping all your work
local?

    Sharing, collaboration and backup (if okay that project is public)

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    If changes are automatically synced, there could be confusion about changes other collaborators may have made to the code.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks are clones of a repo made on GitHub, and point to its origin repo.
    A clone is an exact copy of a repo.
    Branches are a linear or non-linear named chain of commits.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    As a reference point to indicate how many commits have been done since syncing      and how to merge with commits added to the remote since last sync.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Dropbox (for general file types) or Google Drive (for Google's office suite). Code would only work with Dropbox, but merging, comparing and commenting on text within files is not supported so the granularity needed for good collaboration in developing software would not be possible.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    When working in teams where multiple people are making changes to the master during the same period, in which conflicts will arise. Also, when doing experimental features etc. where you would want the main app to be preserved.
    Directly in master is simpler, faster. Using branches allows for multiple new features to be developed and/or by multiple people where the master branch can be preserved as the base of the project.

OTHER NOTES
pull = fetch (just inspect) + merge (git merge origin/master master)
Fast-forward merging (simply moving master pointer to parent, only when two branches are "reachable" by each other)
    -in GitHub, merging (like with pull request) results in standard merge process (where new commit is created from both branches)
    -Makes sense, because then the pull request merge is evident in the commit history (with an auto generated template to indicate a pull request merge)
When using a branch just for pull request, it should be deleted once pull request is complete.
Purpose of pull request (rather than just merging locally then pushing to GitHub) is to communicate changes with team members.
Workflow for working with more branches than just master:
    "Rather than simply pulling and pushing, you need to pull changes into your local master branch, merge the local master into your branch (different-oil, in our case), then push your branch to the remote before finally merging your branch into master, either locally or on GitHub."

    "You could make your changes directly to the master branch in your fork, but when contributing to a public repository, itâ€™s standard practice to make the changes in a non-master branch within the fork. This way, you can easily keep your master branch up-to-date with master of the original repository, and merge changes from master into your branch when you are ready."
